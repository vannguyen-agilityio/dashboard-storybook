/*! normalize.css v1.1.3 | MIT License | git.io/normalize */
/* ==========================================================================
   HTML5 display definitions
   ========================================================================== */
/**
 * Correct `block` display not defined in IE 6/7/8/9 and Firefox 3.
 */
@import url(https://fonts.googleapis.com/css?family=Open+Sans:400,300,600|Roboto:400,300);
article,
aside,
details,
figcaption,
figure,
footer,
header,
hgroup,
main,
nav,
section,
summary {
  display: block;
}

/**
 * Correct `inline-block` display not defined in IE 6/7/8/9 and Firefox 3.
 */
audio,
canvas,
video {
  display: inline-block;
  *display: inline;
  *zoom: 1;
}

/**
 * Prevent modern browsers from displaying `audio` without controls.
 * Remove excess height in iOS 5 devices.
 */
audio:not([controls]) {
  display: none;
  height: 0;
}

/**
 * Address styling not present in IE 7/8/9, Firefox 3, and Safari 4.
 * Known issue: no IE 6 support.
 */
[hidden] {
  display: none;
}

/* ==========================================================================
   Base
   ========================================================================== */
/**
 * 1. Correct text resizing oddly in IE 6/7 when body `font-size` is set using
 *    `em` units.
 * 2. Prevent iOS text size adjust after orientation change, without disabling
 *    user zoom.
 */
html {
  font-size: 100%;
  /* 1 */
  -ms-text-size-adjust: 100%;
  /* 2 */
  -webkit-text-size-adjust: 100%;
  /* 2 */
}

/**
 * Address `font-family` inconsistency between `textarea` and other form
 * elements.
 */
html,
button,
input,
select,
textarea {
  font-family: sans-serif;
}

/**
 * Address margins handled incorrectly in IE 6/7.
 */
body {
  margin: 0;
}

/* ==========================================================================
   Links
   ========================================================================== */
/**
 * Address `outline` inconsistency between Chrome and other browsers.
 */
/**
 * Improve readability when focused and also mouse hovered in all browsers.
 */
a:focus,
a:active,
a:hover {
  outline: 0;
}

/* ==========================================================================
   Typography
   ========================================================================== */
/**
 * Address font sizes and margins set differently in IE 6/7.
 * Address font sizes within `section` and `article` in Firefox 4+, Safari 5,
 * and Chrome.
 */
h1 {
  font-size: 2em;
  margin: 0.67em 0;
}

h2 {
  font-size: 1.5em;
  margin: 0.83em 0;
}

h3 {
  font-size: 1.17em;
  margin: 1em 0;
}

h4 {
  font-size: 1em;
  margin: 1.33em 0;
}

h5 {
  font-size: 0.83em;
  margin: 1.67em 0;
}

h6 {
  font-size: 0.67em;
  margin: 2.33em 0;
}

/**
 * Address styling not present in IE 7/8/9, Safari 5, and Chrome.
 */
abbr[title] {
  border-bottom: 1px dotted;
}

/**
 * Address style set to `bolder` in Firefox 3+, Safari 4/5, and Chrome.
 */
b,
strong {
  font-weight: bold;
}

blockquote {
  margin: 1em 40px;
}

/**
 * Address styling not present in Safari 5 and Chrome.
 */
dfn {
  font-style: italic;
}

/**
 * Address differences between Firefox and other browsers.
 * Known issue: no IE 6/7 normalization.
 */
hr {
  box-sizing: content-box;
  height: 0;
}

/**
 * Address styling not present in IE 6/7/8/9.
 */
mark {
  background: #ff0;
  color: #000;
}

/**
 * Address margins set differently in IE 6/7.
 */
p,
pre {
  margin: 1em auto;
}

/**
 * Correct font family set oddly in IE 6, Safari 4/5, and Chrome.
 */
code,
kbd,
pre,
samp {
  font-family: monospace, serif;
  _font-family: 'courier new', monospace;
  font-size: 1em;
}

/**
 * Improve readability of pre-formatted text in all browsers.
 */
pre {
  white-space: pre;
  white-space: pre-wrap;
  word-wrap: break-word;
}

/**
 * Address CSS quotes not supported in IE 6/7.
 */
q {
  quotes: none;
}

/**
 * Address `quotes` property not supported in Safari 4.
 */
q:before,
q:after {
  content: '';
  content: none;
}

/**
 * Address inconsistent and variable font size in all browsers.
 */
small {
  font-size: 80%;
}

/**
 * Prevent `sub` and `sup` affecting `line-height` in all browsers.
 */
sub,
sup {
  font-size: 75%;
  line-height: 0;
  position: relative;
  vertical-align: baseline;
}

sup {
  top: -0.5em;
}

sub {
  bottom: -0.25em;
}

/* ==========================================================================
   Lists
   ========================================================================== */
/**
 * Address margins set differently in IE 6/7.
 */
dd {
  margin: 0 0 0 40px;
}

/**
 * Address paddings set differently in IE 6/7.
 */
/**
 * Correct list images handled incorrectly in IE 7.
 */
nav ul,
nav ol {
  list-style: none;
  list-style-image: none;
}

/* ==========================================================================
   Embedded content
   ========================================================================== */
/**
 * 1. Remove border when inside `a` element in IE 6/7/8/9 and Firefox 3.
 * 2. Improve image quality when scaled in IE 7.
 */
img {
  border: 0;
  /* 1 */
  -ms-interpolation-mode: bicubic;
  /* 2 */
}

/**
 * Correct overflow displayed oddly in IE 9.
 */
svg:not(:root) {
  overflow: hidden;
}

/* ==========================================================================
   Figures
   ========================================================================== */
/**
 * Address margin not present in IE 6/7/8/9, Safari 5, and Opera 11.
 */
figure {
  margin: 0;
}

/* ==========================================================================
   Forms
   ========================================================================== */
/**
 * Correct margin displayed oddly in IE 6/7.
 */
form {
  margin: 0;
}

/**
 * Define consistent border, margin, and padding.
 */
fieldset {
  border: 1px solid #c0c0c0;
  margin: 0 2px;
  padding: 0.35em 0.625em 0.75em;
}

/**
 * 1. Correct color not being inherited in IE 6/7/8/9.
 * 2. Correct text not wrapping in Firefox 3.
 * 3. Correct alignment displayed oddly in IE 6/7.
 */
legend {
  border: 0;
  /* 1 */
  padding: 0;
  white-space: normal;
  /* 2 */
  *margin-left: -7px;
  /* 3 */
}

/**
 * 1. Correct font size not being inherited in all browsers.
 * 2. Address margins set differently in IE 6/7, Firefox 3+, Safari 5,
 *    and Chrome.
 * 3. Improve appearance and consistency in all browsers.
 */
button,
input,
select,
textarea {
  font-size: 100%;
  /* 1 */
  margin: 0;
  /* 2 */
  vertical-align: baseline;
  /* 3 */
  *vertical-align: middle;
  /* 3 */
}

/**
 * Address Firefox 3+ setting `line-height` on `input` using `!important` in
 * the UA stylesheet.
 */
button,
input {
  line-height: normal;
}

/**
 * Address inconsistent `text-transform` inheritance for `button` and `select`.
 * All other form control elements do not inherit `text-transform` values.
 * Correct `button` style inheritance in Chrome, Safari 5+, and IE 6+.
 * Correct `select` style inheritance in Firefox 4+ and Opera.
 */
button,
select {
  text-transform: none;
}

/**
 * 1. Avoid the WebKit bug in Android 4.0.* where (2) destroys native `audio`
 *    and `video` controls.
 * 2. Correct inability to style clickable `input` types in iOS.
 * 3. Improve usability and consistency of cursor style between image-type
 *    `input` and others.
 * 4. Remove inner spacing in IE 7 without affecting normal text inputs.
 *    Known issue: inner spacing remains in IE 6.
 */
button,
html input[type="button"], input[type="reset"],
input[type="submit"] {
  -webkit-appearance: button;
  /* 2 */
  cursor: pointer;
  /* 3 */
  *overflow: visible;
  /* 4 */
}

/**
 * Re-set default cursor for disabled elements.
 */
button[disabled],
html input[disabled] {
  cursor: default;
}

/**
 * 1. Address box sizing set to content-box in IE 8/9.
 * 2. Remove excess padding in IE 8/9.
 * 3. Remove excess padding in IE 7.
 *    Known issue: excess padding remains in IE 6.
 */
input[type="checkbox"],
input[type="radio"] {
  box-sizing: border-box;
  /* 1 */
  padding: 0;
  /* 2 */
  *height: 13px;
  /* 3 */
  *width: 13px;
  /* 3 */
}

/**
 * 1. Address `appearance` set to `searchfield` in Safari 5 and Chrome.
 * 2. Address `box-sizing` set to `border-box` in Safari 5 and Chrome
 *    (include `-moz` to future-proof).
 */
input[type="search"] {
  -webkit-appearance: textfield;
  /* 1 */
  /* 2 */
  box-sizing: content-box;
}

/**
 * Remove inner padding and search cancel button in Safari 5 and Chrome
 * on OS X.
 */
input[type="search"]::-webkit-search-cancel-button,
input[type="search"]::-webkit-search-decoration {
  -webkit-appearance: none;
}

/**
 * Remove inner padding and border in Firefox 3+.
 */
button::-moz-focus-inner,
input::-moz-focus-inner {
  border: 0;
  padding: 0;
}

/**
 * 1. Remove default vertical scrollbar in IE 6/7/8/9.
 * 2. Improve readability and alignment in all browsers.
 */
textarea {
  overflow: auto;
  /* 1 */
  vertical-align: top;
  /* 2 */
}

/* ==========================================================================
   Tables
   ========================================================================== */
/**
 * Remove most spacing between table cells.
 */
table {
  border-collapse: collapse;
  border-spacing: 0;
}

ol,
ul {
  list-style: none;
}

* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
  background-repeat: no-repeat;
}

h2,
h3,
h4,
h5 {
  font-weight: 300;
}

p {
  margin: 0;
}

img {
  margin: 0;
  max-width: 100%;
}

.comment {
  font-family: "Open Sans", sans-serif;
  font-weight: 300;
  font-size: 16px;
  font-style: normal;
  min-width: 320px;
}

.comment a {
  text-decoration: none;
}

.comment-icon, .comment-menu-edit:before, .comment-menu-edit:hover:before, .comment-menu-remove:before, .comment-menu-remove:hover:before, .comment-angle-review, .comment-angle-menu, .comment-thumb-up, .comment-mention-user {
  background: url("../images/icon.png") no-repeat;
  display: inline-block;
  overflow: hidden;
  text-indent: -9999px;
  text-align: left;
}

.comment-title,
.comment-count {
  color: #222222;
}

.comment-count {
  font-size: 2em;
  font-family: Roboto;
}

.comment-title {
  border-bottom: 1px solid #ffffff;
  display: block;
  font-size: 1em;
  font-weight: 400;
  margin: 0;
  padding: 0.75em 1.5625em;
}

.comment-status {
  background-color: #efefef;
  min-height: 6.25em;
}

.comment-heading {
  font-size: 0.75em;
}

.comment-content {
  font-size: 0.875em;
  font-weight: 400;
  color: #373737;
}

.comment-item {
  border-bottom: 1px solid #ffffff;
  display: table;
  min-height: 4.375em;
  padding: 0.9375em 1.25em;
  position: relative;
  width: 100%;
}

.comment-item:hover .comment-menu {
  display: inline-block;
}

.comment-menu {
  display: none;
  position: absolute;
  right: 0;
  top: 0;
}

.comment-menu .angle-icon {
  display: block;
  position: relative;
  height: 2.875em;
  width: 3.5625em;
  cursor: pointer;
}

.comment-menu .angle-icon i {
  cursor: pointer;
  display: inline-block;
  position: absolute;
  top: 50%;
  left: 50%;
  /* IE 9 */
  /* Firefox */
  -webkit-transform: translate(-50%, -50%);
  /* Chrome, Safari */
  transform: translate(-50%, -50%);
}

.comment-menu ul {
  background-color: #ffffff;
  border-bottom: solid 1px #d7d7d7;
  display: none;
  font-size: 0.8125em;
  padding: 0.9375em 1.25em;
  position: absolute;
  right: 0;
  z-index: 2;
  width: 12.5em;
  box-shadow: -3px -3px 10px #d7d7d7;
}

.comment-menu ul li {
  position: relative;
  padding: 0.3125em 0;
}

.comment-menu ul span {
  padding: 0 0.625em 0 1.75em;
}

.comment-menu ul span:before {
  content: "";
  left: 0;
  position: absolute;
  top: 50%;
  /* IE 9 */
  /* Firefox */
  -webkit-transform: translateY(-50%);
  /* Chrome, Safari */
  transform: translateY(-50%);
  text-align: left;
  display: inline-block;
  overflow: hidden;
  text-indent: -9999px;
}

.comment-menu ul a {
  color: #686868;
}

.comment-menu-edit:hover,
.comment-menu-remove:hover {
  color: #58c3cb;
}

.comment-menu-edit:before {
  background-position: 0px -89px;
  width: 19px;
  height: 17px;
}

.comment-menu-edit:hover:before {
  background-position: 0px -73px;
  width: 19px;
  height: 17px;
}

.comment-menu-remove:before {
  background-position: 0px -123px;
  width: 17px;
  height: 17px;
}

.comment-menu-remove:hover:before {
  background-position: 0px -106px;
  width: 17px;
  height: 17px;
}

.comment-menu.open .angle-icon {
  background-color: #ffffff;
  z-index: 3;
}

.comment-menu.open ul {
  display: inline-block;
}

.comment-angle:before {
  content: "";
  float: left;
}

.comment-angle-review {
  background-position: 0px -27px;
  width: 26px;
  height: 26px;
  vertical-align: bottom;
}

.comment-angle-menu {
  background-position: 0px 0px;
  width: 26px;
  height: 26px;
}

.comment-name,
.comment-linking {
  color: #373737;
  font-family: "Open Sans", sans-serif;
  font-weight: 600;
}

.comment-linking {
  background-color: transparent;
  border: none;
  padding: 0;
  font-size: inherit;
  outline: none;
}

.comment-detail {
  padding-left: 0.625em;
  display: table-cell;
  vertical-align: middle;
}

.comment-photo {
  height: 40px;
  width: 40px;
  display: table-cell;
  vertical-align: top;
}

.comment-photo-layout {
  background-color: #d7d7d7;
  border-radius: 50%;
  overflow: hidden;
  position: relative;
  height: 40px;
  width: 40px;
}

.comment-photo img {
  position: absolute;
  top: 50%;
  left: 50%;
  /* IE 9 */
  /* Firefox */
  -webkit-transform: translate(-50%, -50%);
  /* Chrome, Safari */
  transform: translate(-50%, -50%);
}

.comment-post {
  display: table;
  padding: 0.9375em 1.25em;
  width: 100%;
}

.comment-date {
  position: relative;
  padding: 0 0.5em;
  color: #686868;
}

.comment-date:before,
.comment-date:after {
  content: '';
  position: absolute;
  top: 50%;
  font-size: 2.25em;
  border: 1px solid #686868;
  border-radius: 50%;
}

.comment-date:before {
  left: 0;
}

.comment-date:after {
  right: 0;
}

.comment-action {
  color: #222222;
}

.comment-action i {
  display: none;
}

.comment-action.liked i {
  display: inline-block;
}

.comment-thumb-up {
  background-position: 0px -140px;
  width: 12px;
  height: 14px;
  vertical-align: bottom;
}

.comment-like {
  font-weight: 600;
  color: #373737;
}

.comment-editor {
  border: 1px solid #cccccc;
  border-radius: 0.3125em;
  padding: 0.875em 0.75em;
  min-height: 2.625em;
  margin-left: 0.625em;
  height: auto;
  font-size: 0.75em;
  word-break: break-word;
  word-wrap: break-word;
}

.comment-editor:empty:before {
  content: attr(placeholder);
  display: block;
  /* For Firefox */
  color: #b5b5b5;
}

.comment-view {
  padding: 0.625em 0;
  font-size: 1.5625em;
  text-align: center;
}

.comment-view a {
  color: #222222;
}

.comment-view i {
  display: inline-block;
}

.comment-mention-list {
  min-width: 240px;
  outline: 0;
  position: absolute;
  box-shadow: 0 5px 15px rgba(0, 0, 0, 0.5);
}

.comment-mention-body {
  cursor: pointer;
  display: table-cell;
  vertical-align: middle;
  overflow: hidden;
  padding: 0 0.625em;
  zoom: 1;
}

.comment-mention-body span {
  display: block;
  font-size: 0.6875em;
  color: #b5b5b5;
}

.comment-mention-item {
  padding: 0.625em;
}

.comment-mention-item a {
  display: table-cell;
  vertical-align: top;
  padding: 0 0.1875em;
}

.comment-mention-item:hover {
  background-color: #efefef;
}

.comment-mention-avatar {
  background-color: #d7d7d7;
  border-radius: 50%;
  color: white;
  display: block;
  overflow: hidden;
  height: 40px;
  width: 40px;
  position: relative;
  font-size: 1.375em;
}

.comment-mention-avatar img,
.comment-mention-avatar span {
  position: absolute;
  top: 50%;
  left: 50%;
  /* IE 9 */
  /* Firefox */
  -webkit-transform: translate(-50%, -50%);
  /* Chrome, Safari */
  transform: translate(-50%, -50%);
}

.comment-mention-heading {
  margin: 0;
  font-weight: 600;
  font-size: 0.8125em;
  color: #686868;
}

.comment-mention-user {
  background-position: 0px -52px;
  width: 20px;
  height: 20px;
}

@media screen and (max-width: 768px) {
  .comment-item,
  .comment-post {
    padding: 0.9375em 0.625em;
  }
}

/*# sourceMappingURL=data:application/json;base64, */